let screen = 0; // deklarasi screen awal
var hero, level, peta; // deklarasi variabel hero, peta dan level
var kecepatan = 5; // mengatur kecepatan diawal = 5
var score = 0; // inisialisasi score awal = 0
var posx = 10, posy = 200; // Mengatur Posisi Awal X dan Y hero

function setup() {
  hero = new Hero(10, 200, 20, 20); // set up class Hero 
  level = new Level(1, 1, 5); // set up class Level
  peta = new Map(900, 600); // Setup class Map
  peta.init(); // Memanggil fungsi init pada Class Map
}

function draw() {
  if(screen === 0){ // screen Awal 
    background('#fae'); //kode warna Pink -> BACKGROUND
    fill('#000000') // -> Warna Teks Hitam
    textSize(20) // -> Ukuran Teks 20
    text('Click to Start!', (width/2) - 50, height/2 ); // memuncukklkan Teks pada posisi width / 2 dan height / 2
    text('Tasya Azzahra Putri - 2117051043', (width/2) - 150, height/2 + 20);
    text('Nindi Restu Pembayun - 2117051021', (width/2) - 160, height/2 + 40);
    text('Yuna Meisa Putri - 2117051041', (width/2) - 130, height/2 + 60);
  
  }else if(screen === 1){ // Screen Game ketika Mouse di click
    background('#000000'); // warna Background Hitam
    fill('#ffffff'); // Warna Tulisan putih
    text(`Score: ${score}`, 500, 20) // Memunculkan Tulisan Score => Petik ` `, String Formating = ${}
    text(`Level: ${level.getCurentLevel()}`, 500, 30)
    hero.display(); // memanggil fungsi Display

    for(var mon of peta.monster){ // Looping Monster
        mon.display(); // Memanggil fungsi display Monster

        if(dist(mon.x, mon.y, hero.x, hero.y) < 20){ // Mengecek apakah Posisi Hero dan Monster < dari 20
            peta.monster.splice(peta.monster.indexOf(mon), 1); // Menghapus Monster
         
            if(mon.color === 1){ // jika warna = 1
                hero.calculateLife(); // Menambah ukuran Hero
                hero.increaseScore(); // Menambah Score
                
                if(score % 10 == 0){ // Jika Score Habis dibagi 10
                    level.increaselevel(); // Level akan Naik
                    kecepatan += 5; // Speed akan ditambahkan
                }
                level.checkLevel(); // Memanggil fungsi Check Level
            }else{ // Jika color bukan 1
                screen = 2; // Memanggil screen 2
            }
        }
    }

    for(var mon of peta.monster){ // Looping Monster
     
      if(mon.x < 0){ // Jika posisi X monster 0
        peta.monster.splice(peta.monster.indexOf(mon), 1); 
        var posY = random(0, 600); // Akan Merandom Monster Baru
        var posX = random(2000, 600);
        mon = new Monster(posX, posY, 10, 10);
        peta.monster.push(mon)
      }
    }
    
    if (keyIsDown(87)) { // 87 == W
      hero.moveUp();
    
    }else if (keyIsDown(83)) { // 83 == s
      hero.moveDown();
    
    }else if (keyIsDown(65)) { // 65 == A
      hero.moveLeft();
    
    }else if (keyIsDown(68)) { // 68 == D
      hero.moveRight();
    }

  }else{
    background('#000000');
    fill('#FFFFFF')
    textSize(20);
    text('Game Over', width/2 - 50, height/2);
    textSize(16);
    text(`Your Score: ${score}`, width/2 - 50, height/2 + 20);
    text(`Your Level: ${level.getCurentLevel()}`, width/2 - 50, height/2 + 40);
    text(`Click To Continue!`, width/2 - 50, height/2 + 60);
  }
}

function mousePressed(){
	if(screen == 0){//screen awal > jika diklik akan berubah jadi 1
        screen = 1
        level.setLevel(1);
        peta.init();
    }else if(screen == 2){ // jika diklik akan berubah jadi screen 0
        screen = 0 // Mereset semua menjadi awal 0
        score = 0;
        kecepatan = 5;
        posx = 10;
        posy = 200;
        level.setLevel(1);
    }
}

class Entity { // Class Entity
  constructor(x, y, width, height) { // Constructor CLass Entity
    this.x = x;
    this.y = y;
    this.height = width;
    this.width = height;
  }
  
  moveRight(){ // Bergerak Kekanan. x ditambah
    if(this.x < 600){    
      this.x += 2;
    }
  }

  moveLeft(){ // Bergerak Kekanan. x dikurang
    if(this.x > 0){
      this.x -= 2;
    }
  }

  moveDown(){ // Bergerak Kekanan. y ditambah
    if(this.y < 600){
      this.y += 2;
    }
  }
  moveUp(){ // Bergerak Kekanan. xy dikurang
    if(this.y > 0){
      this.y -= 2;
    }
  }
}

class Hero extends Entity{ // Class Hero extend ke Entity -> Hero child Class, Entity Parent Class
  constructor(x, y, width, height) {
    super(x, y, width, height);
    this.life = 1;
  }
  
  display(){
    fill('#fae'); // Kode Warna Pink
    rect(this.x, this.y, this.width, this.height); // Membuat bentuk Persegi
    noFill();
  }
  
  increaseScore(){ // Fungsi Menambah Score
    score ++;
  }

  calculateLife(){ // Fungsi Untuk meningkatkan Ukuran Hero
    if(this.width > 50 && this.height > 50){
        this.width = 50;
        this.height = 50;
    }else{    
      this.width += 3;
      this.height += 3; 
    }
  }
}
